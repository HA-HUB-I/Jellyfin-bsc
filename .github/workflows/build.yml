name: Build and Release Jellyfin Plugin

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub Release'
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build plugin
        run: dotnet build --configuration Release

      - name: Prepare package
        run: |
          PLUGIN_DIR="Jellyfin.Plugin.BulsatcomChannel"
          mkdir -p "dist/${PLUGIN_DIR}"
          cp "bin/Release/net8.0/${PLUGIN_DIR}.dll" "dist/${PLUGIN_DIR}/"
          cp plugin.xml "dist/${PLUGIN_DIR}/"

      - name: Create zip archive
        run: |
          cd dist
          zip -r ../plugin.zip .

      - name: Calculate MD5 checksum
        id: checksum
        run: |
          MD5_HASH=$(md5sum plugin.zip | cut -d ' ' -f 1)
          echo "md5=$MD5_HASH" >> $GITHUB_OUTPUT
          echo "MD5 checksum: $MD5_HASH"

      - name: Update manifest with checksum
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          MD5_HASH="${{ steps.checksum.outputs.md5 }}"
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Update manifest.json with the actual checksum, version and timestamp
          jq --arg version "$VERSION" \
             --arg checksum "$MD5_HASH" \
             --arg timestamp "$TIMESTAMP" \
             --arg sourceUrl "https://github.com/HA-HUB-I/Jellyfin-bsc/releases/download/v$VERSION/plugin.zip" \
             '.[0].versions[0].version = $version | 
              .[0].versions[0].checksum = $checksum | 
              .[0].versions[0].timestamp = $timestamp |
              .[0].versions[0].sourceUrl = $sourceUrl' \
             manifest.json > manifest_updated.json && mv manifest_updated.json manifest.json

      - name: Commit updated manifest
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add manifest.json
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update manifest with checksum for ${{ github.ref_name }}"
            git push origin HEAD:main
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: jellyfin-plugin
          path: plugin.zip

      - name: Create GitHub Release (Tag Release)
        id: create_tag_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: plugin.zip
          fail_on_unmatched_files: true
          generate_release_notes: true
          
      - name: Generate unique tag for manual release
        id: manual_tag
        if: github.event.inputs.create_release == 'true' && !startsWith(github.ref, 'refs/tags/')
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG_NAME="manual-$TIMESTAMP"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG_NAME"

      - name: Create GitHub Release (Manual)
        id: create_manual_release
        if: github.event.inputs.create_release == 'true' && !startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: plugin.zip
          fail_on_unmatched_files: true
          tag_name: ${{ steps.manual_tag.outputs.tag_name }}
          name: "Manual Build - ${{ steps.manual_tag.outputs.tag_name }}"
          body: "Manual build from commit ${{ github.sha }}"
          prerelease: true
